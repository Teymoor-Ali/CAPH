-- -------------------------------------------------------------------------------
-- This file has been automatically generated by the Caph compiler (version 2.8.5)
-- from file main.cph, on 2020-05-06 at 15:29:19, by <unknown>
-- For more information, see : http://caph.univ-bpclermont.fr
-- -------------------------------------------------------------------------------

library ieee,caph,work;
use ieee.std_logic_1164.all;
use caph.core.all;
use caph.data_types.all;
use ieee.numeric_std.all;
use work.all;
use work.sobel_globals.all;

entity conv233a_act is
   generic (
    k: array3_array3_s12;
    n: integer;
    v: signed(11 downto 0)
    );
  port (
    i_empty: in std_logic;
    i: in std_logic_vector(13 downto 0);
    i_rd: out std_logic;
    z0_empty: in std_logic;
    z0: in std_logic_vector(11 downto 0);
    z0_rd: out std_logic;
    z1_empty: in std_logic;
    z1: in std_logic_vector(11 downto 0);
    z1_rd: out std_logic;
    o_full: in std_logic;
    o: out std_logic_vector(13 downto 0);
    o_wr: out std_logic;
    oz0_full: in std_logic;
    oz0: out std_logic_vector(11 downto 0);
    oz0_wr: out std_logic;
    oz1_full: in std_logic;
    oz1: out std_logic_vector(11 downto 0);
    oz1_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end conv233a_act;

architecture FSM of conv233a_act is
    type t_enum9 is (S0,S1,S2,S3,S4,S5,S6,S7,S8);
    signal x : array3_array2_s12;
    signal n_x : array3_array2_s12;
    signal en_x : array3_array2_b;
    signal s : t_enum9;
    signal n_s : t_enum9;
    signal en_s : boolean;
begin
  comb: process(i, i_empty, z0, z0_empty, z1, z1_empty, o_full, oz0_full, oz1_full, s, x)
    variable p_p2 : signed(11 downto 0);
    variable p_p1 : signed(11 downto 0);
    variable p_p0 : signed(11 downto 0);
    variable n_x_tmp : array3_array2_s12;
    variable en_x_tmp : array3_array2_b;
  begin
    -- i.rdy, i=SoS, s=S0, o.rdy / rd(i), s:=S1, wr(o,SoS)
    if i_empty='0' and dc_s12.is_soS(i) and s=S0 and o_full='0' then
      i_rd <= '1';
      n_s <= S1;
      en_s <= true;
      o <= dc_s12.mk_soS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=EoS, s=S1, o.rdy / rd(i), s:=S0, wr(o,EoS)
    elsif i_empty='0' and dc_s12.is_eoS(i) and s=S1 and o_full='0' then
      i_rd <= '1';
      n_s <= S0;
      en_s <= true;
      o <= dc_s12.mk_eoS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=SoS, s=S1, o.rdy / rd(i), s:=S2, wr(o,SoS)
    elsif i_empty='0' and dc_s12.is_soS(i) and s=S1 and o_full='0' then
      i_rd <= '1';
      n_s <= S2;
      en_s <= true;
      o <= dc_s12.mk_soS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=Data(p_p0), s=S2, oz0.rdy, o.rdy / p_p0=i.data, s:=S2, wr(o,Data(v)), wr(oz0,p_p0)
    elsif i_empty='0' and dc_s12.is_data(i) and s=S2 and oz0_full='0' and o_full='0' then
      p_p0 := dc_s12.get_data(i);
      i_rd <= '1';
      n_s <= S2;
      en_s <= true;
      o <= dc_s12.mk_data(v);
      o_wr <= '1';
      oz0 <= std_logic_vector(p_p0);
      oz0_wr <= '1';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=EoS, s=S2, o.rdy / rd(i), s:=S3, wr(o,EoS)
    elsif i_empty='0' and dc_s12.is_eoS(i) and s=S2 and o_full='0' then
      i_rd <= '1';
      n_s <= S3;
      en_s <= true;
      o <= dc_s12.mk_eoS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=SoS, s=S3, o.rdy / rd(i), s:=S4, wr(o,SoS)
    elsif i_empty='0' and dc_s12.is_soS(i) and s=S3 and o_full='0' then
      i_rd <= '1';
      n_s <= S4;
      en_s <= true;
      o <= dc_s12.mk_soS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- z0.rdy, i.rdy, i=Data(p_p0), s=S4, oz0.rdy, oz1.rdy, o.rdy / p_p1=z0, p_p0=i.data, s:=S4, wr(o,Data(v)), wr(oz1,p_p1), wr(oz0,p_p0)
    elsif z0_empty='0' and i_empty='0' and dc_s12.is_data(i) and s=S4 and oz0_full='0' and oz1_full='0' and o_full='0' then
      p_p1 := from_std_logic_vector(z0,12);
      z0_rd <= '1';
      p_p0 := dc_s12.get_data(i);
      i_rd <= '1';
      n_s <= S4;
      en_s <= true;
      o <= dc_s12.mk_data(v);
      o_wr <= '1';
      oz1 <= std_logic_vector(p_p1);
      oz1_wr <= '1';
      oz0 <= std_logic_vector(p_p0);
      oz0_wr <= '1';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=EoS, s=S4, o.rdy / rd(i), s:=S5, wr(o,EoS)
    elsif i_empty='0' and dc_s12.is_eoS(i) and s=S4 and o_full='0' then
      i_rd <= '1';
      n_s <= S5;
      en_s <= true;
      o <= dc_s12.mk_eoS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=EoS, s=S5, o.rdy / rd(i), s:=S0, wr(o,EoS)
    elsif i_empty='0' and dc_s12.is_eoS(i) and s=S5 and o_full='0' then
      i_rd <= '1';
      n_s <= S0;
      en_s <= true;
      o <= dc_s12.mk_eoS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- i.rdy, i=SoS, s=S5, o.rdy / rd(i), s:=S6, wr(o,SoS)
    elsif i_empty='0' and dc_s12.is_soS(i) and s=S5 and o_full='0' then
      i_rd <= '1';
      n_s <= S6;
      en_s <= true;
      o <= dc_s12.mk_soS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    -- z1.rdy, z0.rdy, i.rdy, i=Data(p_p0), s=S6, oz0.rdy, oz1.rdy, o.rdy / p_p2=z1, p_p1=z0, p_p0=i.data, s:=S7, wr(o,Data(v)), x[2][0]:=p_p2, x[1][0]:=p_p1, x[0][0]:=p_p0, wr(oz1,p_p1), wr(oz0,p_p0)
    elsif z1_empty='0' and z0_empty='0' and i_empty='0' and dc_s12.is_data(i) and s=S6 and oz0_full='0' and oz1_full='0' and o_full='0' then
      p_p2 := from_std_logic_vector(z1,12);
      z1_rd <= '1';
      p_p1 := from_std_logic_vector(z0,12);
      z0_rd <= '1';
      p_p0 := dc_s12.get_data(i);
      i_rd <= '1';
      n_s <= S7;
      en_s <= true;
      o <= dc_s12.mk_data(v);
      o_wr <= '1';
      oz1 <= std_logic_vector(p_p1);
      oz1_wr <= '1';
      oz0 <= std_logic_vector(p_p0);
      oz0_wr <= '1';
      n_x_tmp := x;
      en_x_tmp := (others => (others => false));
      n_x_tmp(to_integer(0))(to_integer(0)) := p_p0;
      en_x_tmp(to_integer(0))(to_integer(0)) := true;
      n_x_tmp(to_integer(1))(to_integer(0)) := p_p1;
      en_x_tmp(to_integer(1))(to_integer(0)) := true;
      n_x_tmp(to_integer(2))(to_integer(0)) := p_p2;
      en_x_tmp(to_integer(2))(to_integer(0)) := true;
      n_x <= n_x_tmp;
      en_x <= en_x_tmp;
    -- z1.rdy, z0.rdy, i.rdy, i=Data(p_p0), s=S7, oz0.rdy, oz1.rdy, o.rdy / p_p2=z1, p_p1=z0, p_p0=i.data, s:=S8, wr(o,Data(v)), x[2][1]:=x[2][0], x[2][0]:=p_p2, x[1][1]:=x[1][0], x[1][0]:=p_p1, x[0][1]:=x[0][0], x[0][0]:=p_p0, wr(oz1,p_p1), wr(oz0,p_p0)
    elsif z1_empty='0' and z0_empty='0' and i_empty='0' and dc_s12.is_data(i) and s=S7 and oz0_full='0' and oz1_full='0' and o_full='0' then
      p_p2 := from_std_logic_vector(z1,12);
      z1_rd <= '1';
      p_p1 := from_std_logic_vector(z0,12);
      z0_rd <= '1';
      p_p0 := dc_s12.get_data(i);
      i_rd <= '1';
      n_s <= S8;
      en_s <= true;
      o <= dc_s12.mk_data(v);
      o_wr <= '1';
      oz1 <= std_logic_vector(p_p1);
      oz1_wr <= '1';
      oz0 <= std_logic_vector(p_p0);
      oz0_wr <= '1';
      n_x_tmp := x;
      en_x_tmp := (others => (others => false));
      n_x_tmp(to_integer(0))(to_integer(0)) := p_p0;
      en_x_tmp(to_integer(0))(to_integer(0)) := true;
      n_x_tmp(to_integer(0))(to_integer(1)) := x(0)(0);
      en_x_tmp(to_integer(0))(to_integer(1)) := true;
      n_x_tmp(to_integer(1))(to_integer(0)) := p_p1;
      en_x_tmp(to_integer(1))(to_integer(0)) := true;
      n_x_tmp(to_integer(1))(to_integer(1)) := x(1)(0);
      en_x_tmp(to_integer(1))(to_integer(1)) := true;
      n_x_tmp(to_integer(2))(to_integer(0)) := p_p2;
      en_x_tmp(to_integer(2))(to_integer(0)) := true;
      n_x_tmp(to_integer(2))(to_integer(1)) := x(2)(0);
      en_x_tmp(to_integer(2))(to_integer(1)) := true;
      n_x <= n_x_tmp;
      en_x <= en_x_tmp;
    -- z1.rdy, z0.rdy, i.rdy, i=Data(p_p0), s=S8, oz0.rdy, oz1.rdy, o.rdy / p_p2=z1, p_p1=z0, p_p0=i.data, s:=S8, wr(o,Data((k[0][0]*x[2][1]+k[0][1]*x[2][0]+k[0][2]*p_p2+k[1][0]*x[1][1]+k[1][1]*x[1][0]+k[1][2]*p_p1+k[2][0]*x[0][1]+k[2][1]*x[0][0]+k[2][2]*p_p0)>>n)), x[2][1]:=x[2][0], x[2][0]:=p_p2, x[1][1]:=x[1][0], x[1][0]:=p_p1, x[0][1]:=x[0][0], x[0][0]:=p_p0, wr(oz1,p_p1), wr(oz0,p_p0)
    elsif z1_empty='0' and z0_empty='0' and i_empty='0' and dc_s12.is_data(i) and s=S8 and oz0_full='0' and oz1_full='0' and o_full='0' then
      p_p2 := from_std_logic_vector(z1,12);
      z1_rd <= '1';
      p_p1 := from_std_logic_vector(z0,12);
      z0_rd <= '1';
      p_p0 := dc_s12.get_data(i);
      i_rd <= '1';
      n_s <= S8;
      en_s <= true;
      o <= dc_s12.mk_data(SHIFT_RIGHT(((((((((mul(k(0)(0),x(2)(1))) + (mul(k(0)(1),x(2)(0)))) + (mul(k(0)(2),p_p2))) + (mul(k(1)(0),x(1)(1)))) + (mul(k(1)(1),x(1)(0)))) + (mul(k(1)(2),p_p1))) + (mul(k(2)(0),x(0)(1)))) + (mul(k(2)(1),x(0)(0)))) + (mul(k(2)(2),p_p0)), to_integer(n)));
      o_wr <= '1';
      oz1 <= std_logic_vector(p_p1);
      oz1_wr <= '1';
      oz0 <= std_logic_vector(p_p0);
      oz0_wr <= '1';
      n_x_tmp := x;
      en_x_tmp := (others => (others => false));
      n_x_tmp(to_integer(0))(to_integer(0)) := p_p0;
      en_x_tmp(to_integer(0))(to_integer(0)) := true;
      n_x_tmp(to_integer(0))(to_integer(1)) := x(0)(0);
      en_x_tmp(to_integer(0))(to_integer(1)) := true;
      n_x_tmp(to_integer(1))(to_integer(0)) := p_p1;
      en_x_tmp(to_integer(1))(to_integer(0)) := true;
      n_x_tmp(to_integer(1))(to_integer(1)) := x(1)(0);
      en_x_tmp(to_integer(1))(to_integer(1)) := true;
      n_x_tmp(to_integer(2))(to_integer(0)) := p_p2;
      en_x_tmp(to_integer(2))(to_integer(0)) := true;
      n_x_tmp(to_integer(2))(to_integer(1)) := x(2)(0);
      en_x_tmp(to_integer(2))(to_integer(1)) := true;
      n_x <= n_x_tmp;
      en_x <= en_x_tmp;
    -- i.rdy, i=EoS, s=S8, o.rdy / rd(i), s:=S5, wr(o,EoS)
    elsif i_empty='0' and dc_s12.is_eoS(i) and s=S8 and o_full='0' then
      i_rd <= '1';
      n_s <= S5;
      en_s <= true;
      o <= dc_s12.mk_eoS;
      o_wr <= '1';
      oz0 <= (others => 'X');
      oz0_wr <= '0';
      oz1 <= (others => 'X');
      oz1_wr <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      n_x <= x;
      en_x <= (others => (others => false));
    else
      i_rd <= '0';
      z0_rd <= '0';
      z1_rd <= '0';
      o_wr <= '0';
      oz0_wr <= '0';
      oz1_wr <= '0';
      o <= (others => 'X');
      oz0 <= (others => 'X');
      oz1 <= (others => 'X');
      en_x <= (others => (others => false));
      en_s <= false;
      n_x <= x;
      n_s <= s;
    end if;
  end process;
  seq: process(clock, reset)
  begin
    if (reset='0') then
      s <= S0;
    elsif rising_edge(clock) then
      for i1 in 0 to 2 loop
        for i2 in 0 to 1 loop
          if ( en_x(i1)(i2) ) then
            x(i1)(i2) <= n_x(i1)(i2) after 1 ns;
          end if;
        end loop;
      end loop;
      if ( en_s ) then
        s <= n_s after 1 ns;
      end if;
    end if;
  end process;
end FSM;
