-- -------------------------------------------------------------------------------
-- This file has been automatically generated by the Caph compiler (version 2.8.5)
-- from file main.cph, on 2020-05-08 at 00:10:27, by <unknown>
-- For more information, see : http://caph.univ-bpclermont.fr
-- -------------------------------------------------------------------------------

library ieee,caph,work;
use ieee.std_logic_1164.all;
use caph.core.all;
use caph.data_types.all;
use ieee.numeric_std.all;
use work.all;
use work.conv33_v1_globals.all;

entity abs_act is
   port (
    a_empty: in std_logic;
    a: in std_logic_vector(17 downto 0);
    a_rd: out std_logic;
    c_full: in std_logic;
    c: out std_logic_vector(17 downto 0);
    c_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end abs_act;

architecture FSM of abs_act is
begin
  comb: process(a, a_empty, c_full)
    variable p_x : signed(15 downto 0);
  begin
    -- a.rdy, a=SoS, c.rdy / rd(a), wr(c,SoS)
    if a_empty='0' and dc_s16.is_soS(a) and c_full='0' then
      a_rd <= '1';
      c <= dc_s16.mk_soS;
      c_wr <= '1';
    -- a.rdy, a=EoS, c.rdy / rd(a), wr(c,EoS)
    elsif a_empty='0' and dc_s16.is_eoS(a) and c_full='0' then
      a_rd <= '1';
      c <= dc_s16.mk_eoS;
      c_wr <= '1';
    -- a.rdy, a=Data(p_x), a.data < 0, c.rdy / p_x=a.data, wr(c,Data(~-(p_x)))
    elsif a_empty='0' and dc_s16.is_data(a) and ((dc_s16.get_data(a)) < (to_signed(0,16))) and c_full='0' then
      p_x := dc_s16.get_data(a);
      a_rd <= '1';
      c <= dc_s16.mk_data(-(p_x));
      c_wr <= '1';
    -- a.rdy, a=Data(p_x), c.rdy / p_x=a.data, wr(c,Data(p_x))
    elsif a_empty='0' and dc_s16.is_data(a) and c_full='0' then
      p_x := dc_s16.get_data(a);
      a_rd <= '1';
      c <= dc_s16.mk_data(p_x);
      c_wr <= '1';
    else
      a_rd <= '0';
      c_wr <= '0';
      c <= (others => 'X');
    end if;
  end process;
  seq: process(clock, reset)
  begin
    if (reset='0') then
    elsif rising_edge(clock) then
    end if;
  end process;
end FSM;
